1、冒泡排序

2、快排序:数组的低位为0高位为数组长度，以a[0]为基准
          从右边做循环，找出比a[0]小的值，换到左边去
          从左边循环，找出比a[0]大的值，换到右边去
          当循环做完，a[i]的位置是为空的，它的左边是比基准小的数
          右边是比基准大的数。把基准放到a[i]位置。
          再递归排序左边数，
          递归排序右边数。

3、堆排序


4、三种数据库限制行数查询的查询语句？
   1>sqlserver:
     前十条数据
     select top 10 * form t_student
     前百分十的数据
     select top 10 percent * from t_student

   2>mysql:
     //从第0数据开始到第五条
     select * from t_student limit 0,5

   3>oracale:
     使查询结果最多返回前10行:
     select * from t_student where rownum<=10
     使查询结果返回中间的10到100行:
     select * from t_student where rownum < 101 minus select * from t_student where rownum > 9


5、排序查询数据
   select * from t_student order by age asc //升序
   select * from t_student order by age desc //降序
   select * from t_student order by age,num //多列排序

6、常用数据库函数
   1>转换类型函数(convert):
     select convert(int,"021440301")//把字符串转换为整型,结果21440301
   2>用来寻找一个指定的字符串在另一个字符串中的起始位置(charindex):
     select charindex("abc","afafdeabcdefghijk",1)
   3>去除空格函数
     ltrim:去除左边空格
     rtrim:去除右边空格
   4>从右边取第n个字符函数
     select right("迅博科技",2)返回结果-->科技
   5>替换函数replace
     select replace("迅播科技","播","博")把播换成博

7、模糊查询
   1>select * from t_student where studen_name like '%非';
   2>select * from t_student where student_tel is null;
   3>select * from t_student where age between 18 and 30;
   4>select * from t_student where address in('北京','上海');

8、常用聚合函数
   1>sum: select sum(age) from t_student
   2>avg: select avg(age) from t_student
   3>count: select count(age) from t_student
   4>max: select max(age) from t_student
   5>min: select min(age) from t_student
     

9、分组[条件]查询
   1>select courseId, ave(score) from t_course group by courseId
   2>select studentId,courseId,ave(score) from t_course group by courseId,studentId
   3>select courseId, max(score) from t_course group by courseId having courseId = 1


10、多表联查
    1>内联（inner join on）:
      select * from t_student as d inner join t_score as s on d.scoreId = s.scoreId
    2>左外联(left join on)
      select * from t_student as d left  join t_score as s on d.scoreId = s.scoreId
    3>右外联(right join on)
      select * from t_student as d right join t_score as s on d.scoreId = s.scoreId
    4>完整外联(full join on)
      select * from t_student as d full  join t_score as s on d.scoreId = s.scoreId
    