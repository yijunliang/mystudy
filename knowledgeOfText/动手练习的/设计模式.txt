2019-02-16
1、单例模式
   适用场景: 只需要一个实例的场景，每次获取到的实例都是一样的。
             如许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。
			 比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，
			 然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。
			 同时也适用于线程之间共享资源。需要注意的是如果单例对象长时间没有被使用会被回收。
			 
   实现思路: 私有构造，使外部不能创建其实例，使全局只有一个实例，有一个返回唯一实例的静态方法。
   
   懒加载单例和饿单例的区别，懒加载单例在多线程情况下会有线程安全问题(创建两个实例)，饿单例不会。
   

2019-02-17
2、工厂模式
   适用场景: 有一系列的类型，如果每个类型都是直接new，那么当类型改变时，需要修改散落在系统的所有地方
             如果使用工厂模式，让工厂创建需要的类型，那么当需要修改时只需要修改工厂类中代码即可。
			 
   实现思路: 抽象产品类，会有各种系列的产品(颜色、大小等)的实现类，如何使用这些系列的某种产品，
             一种方法是直接new对应的系列实例，但是这样当需要修改时，将要在所有地方修改对应的实例，如要把红色修改为深红色实例
			 那么就需要找到new红色实例的地方然后一一修改为深红色实例；而如果使用工厂模式，只需要修改工厂类中创建实例的方法即可。