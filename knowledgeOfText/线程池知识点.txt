1、线程池核心原型
   ThreadPoolExecutor(int corePoolSize,//核心线程数
					  int maximumPoolSize,//最大线程数
					  long keepAliveTime,//线程存活时间
					  TimeUnit unit,//时间单位
					  BlockingQueue<Runnable> workQueue,//任务队列(默认为无界队列)
					  ThreadFactory threadFactory,//线程工厂
					  RejectedExecutionHandler handler)//饱和策略
					                  
	                                                 未达到，创建线程执行任务
	线程池执行流程:提交任务-->是否已达到核心线程数-->                         未满，将任务放入队列
					                                 已达到-->队列是否已满-->                               未达到，创建线程执行任务
													                          已满-->是否达到最大线程数量-->
																			                                已达到，采用饱和策略处理
	说明:核心线程不会死亡，当任务队列为空时，只是阻塞等待任务队列有任务。
	     核心线程之外的线程，任务队列为空时会阻塞至存活时间，到达存活时间任务队列还是为空则线程会死亡。
	
2、常见的4种线程池
   1>FixedThreadPool(10) 指定核心线程数和最大线程数，存活时间为0秒，使用无界队列(LinkedBlockingQueue)，默认线程工厂，默认饱和策略
     ThreadPoolExecutor(10, 10, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),Executors.defaultThreadFactory(), defaultHandler)
	 LinkedBlockingQueue队列说明:是无界的，是一个无界缓存的等待队列。
	 
	 特点:创建指定数量的线程处理任务，线程不会死亡，一直取任务队列中的任务，没有任务则阻塞
	 
   2>CachedThreadPool() 核心线程为0，最大线程数为整数最大值，存活时间60秒，使用SynchronousQueue(不缓存任务)队列，默认线程工厂，默认饱和策略
     ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.MILLISECONDS, new SynchronousQueue<Runnable>(),Executors.defaultThreadFactory(), defaultHandler)
	 SynchronousQueue队列说明:是无界的，是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加。
	 分析:第一个任务提交，线程池此时已达到核心线程，判断队列是否已满，未满，任务入队列，已满使用饱和策略处理，没有达到最大线程数量，创建一个新的线程执行第一个任务
	      核心线程数是0，提交一个任务后即达到核心线程数，第二个任务到达时，如果第一个任务还没执行完，那么就会创建一个新的线程执行第二个任务，
	      如果第一个任务已经执行完，线程则会等待60秒，如果60秒内没有任务到达那么第一个线程就结束了，60秒内有任务到达则复用第一个线程执行到达的任务。
	 特点:线程有等待时间，时间内可以复用，有n个耗时任务就会创建n个线程(任务队列只能存一个任务，有线程取出一个任务才能进一个任务)
	 
   3>newScheduledThreadPool(10) 指定核心线程为10，最大线程数为整数最大值，存活时间0，使用优先级队列(DelayedWorkQueue)，默认线程工厂，默认饱和策略
     ThreadPoolExecutor(10, Integer.MAX_VALUE, 0, NANOSECONDS, new DelayedWorkQueue(),Executors.defaultThreadFactory(), defaultHandler)
	 DelayedWorkQueue队列说明:是无界的，是一种无界缓存的具有优先级的等待队列。
	 
	 特点:指定核心线程数不会死亡，按优先级处理任务
	 
   4>newSingleThreadExecutor() 指定核心线程为1，最大线程数为1，存活时间0秒，使用无界队列(LinkedBlockingQueue)，默认线程工厂，默认饱和策略
     ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),Executors.defaultThreadFactory(), defaultHandler)
	 
	 特点:只有一个线程处理任务
	 
3、任务提交的方式
   1>submit有返回值，能判断任务是成功还是失败，需要回调结果则会影响执行速度，时间是所有线程执行完的时间
   2>execute无返回值，不知道任务是否执行成功
	 
	
   
   
   
   
   
   
   
   
   
   
   
   
   
   